
enum AutosendingControlsMode {
  BASIC
  DETAILED
}

enum CampaignBuilderMode {
  BASIC
  ADVANCED
  TEMPLATE
}

input BulkUpdateScriptInput {
  searchString: String!
  replaceString: String!
  campaignIds: [String!]!
  organizationId: String!
}

input ContactActionInput {
  cell: Phone!
  assignmentId: String
  message: MessageInput
  reason: String
}

input ContactTagActionInput {
  addedTagIds: [String]!
  removedTagIds: [String]!
  message: MessageInput
}

input QuestionResponseInput {
  campaignContactId: String!
  interactionStepId: String!
  value: String!
}

input AnswerOptionInput {
  action: String
  value: String!
  nextInteractionStepId: String
}

input MessageInput {
  text: String
  contactNumber: Phone
  assignmentId: String
  userId: String
  versionHash: String
  campaignVariableIds: [String!]
}

input InviteInput {
  id: String
  is_valid: Boolean
  hash: String
  created_at: Date
}

input UserInput {
  id: String
  firstName: String!
  lastName: String!
  email: String!
  cell: String!
  notificationFrequency: String!
  oldPassword: String
  newPassword: String
}

input ContactMessage {
  message: MessageInput!
  campaignContactId: String!
}

input OffsetLimitCursor {
  offset: Int!
  limit: Int!
}

input CampaignIdContactId {
  campaignId: String!
  campaignContactId: String!
  messageIds: [String]!
}

input UpdateLinkDomain {
  maxUsageCount: Int
  isManuallyDisabled: Boolean
}

enum ReleaseActionTarget {
  UNSENT
  UNREPLIED
}

input UserPasswordChange {
  password: String!
  passwordConfirm: String!
  newPassword: String!
}

type Action {
  name: String
  display_name: String
  instructions: String
}

type FoundContact {
  found: Boolean
}

input FetchCampaignOverlapInput {
  targetCampaignId: String!
  includeArchived: Boolean!
}

type FetchCampaignOverlapResult {
  campaign: Campaign!,
  overlapCount: Int!
  lastActivity: Date!
}

type DeleteCampaignOverlapResult {
  campaign: Campaign,
  deletedRowCount: Int!
  remainingCount: Int!
}

type PageInfo {
  limit: Int!
  offset: Int!
  next: Int
  previous: Int
  total: Int!
}

type ReturnString {
  data: String!
}

type ScriptUpdateChange {
  id: String!
  campaignId: String!
  campaignName: String!
  script: String!
}

type ScriptUpdateResult {
  campaignId: String!
  found: String!
  replaced: String!
}

type ReleaseAllUnhandledRepliesResult {
  campaignCount: Int
  contactCount: Int
}

enum CampaignExportType {
  SPOKE
  VAN
}

input ExportForVanInput {
  includeUnmessaged: Boolean!
  vanIdField: String!
}

input ExportForSpokeInput {
  campaign: Boolean!
  messages: Boolean!
  optOuts: Boolean!
  filteredContacts: Boolean!
}

input CampaignExportInput {
  campaignId: String!
  exportType: CampaignExportType!
  spokeOptions: ExportForSpokeInput
  vanOptions: ExportForVanInput
}

input QuestionResponseSyncConfigInput {
  id: String!
}

input QuestionResponseSyncTargetInput {
  configId: String!
  responseOptionId: String
  activistCodeId: String
  resultCodeId: String
}

input SyncCampaignToSystemInput {
  campaignId: String!
}

type OptOutByCampaign {
  id: String!
  title: String!
  count: String!
}

type RootQuery {
  currentUser: User
  organization(id:String!, utc:String): Organization
  campaign(id:String!): Campaign
  inviteByHash(hash:String!): [Invite]
  contact(id:String!): CampaignContact
  assignment(id:String!): Assignment
  team(id: String!): Team!
  organizations(active: Boolean): [Organization]
  availableActions(organizationId:String!): [Action]
  conversations(cursor:OffsetLimitCursor!, organizationId:String!, campaignsFilter:CampaignsFilter, assignmentsFilter:AssignmentsFilter, tagsFilter: TagsFilter, contactsFilter:ContactsFilter, contactNameFilter:ContactNameFilter): PaginatedConversations
  campaigns(organizationId:String!, cursor:OffsetLimitCursor, campaignsFilter: CampaignsFilter): CampaignsReturn
  people(organizationId:String, cursor:OffsetLimitCursor, campaignsFilter:CampaignsFilter, role: String, userIds:[String]): UsersReturn
  peopleByUserIds(userIds:[String], organizationId:String!): UsersList
  fetchCampaignOverlaps(input: FetchCampaignOverlapInput!): [FetchCampaignOverlapResult]!
  assignmentRequests(organizationId: String!, status: String): [AssignmentRequest]
  trollAlarms(organizationId: String!, limit: Int!, offset: Int!, token: String, dismissed: Boolean!): TrollAlarmPage!
  trollAlarmsCount(organizationId: String!, dismissed: Boolean!): TrollAlarmCount!,
  trollTokens(organizationId: String!): [TrollTrigger]
  externalSystem(systemId: String!): ExternalSystem!
  externalSystems(organizationId: String!, after: Cursor, first: Int): ExternalSystemPage!
  externalLists(organizationId: String!, systemId: String!, after: Cursor, first: Int): ExternalListPage!
  notices(organizationId: String): NoticePage!
  campaignGroups(organizationId: String! after: Cursor, first: Int): CampaignGroupPage!
  campaignNavigation(campaignId: String!): CampaignNavigation!
  bulkUpdateScriptChanges(findAndReplace: BulkUpdateScriptInput!): [ScriptUpdateChange!]!
  superadmins: [User!]
  optOuts(organizationId: String!): [OptOutByCampaign!]!
  isValidAttachment(fileUrl: String!): Boolean!
}

input SecondPassInput {
  excludeAgeInHours: Float
  excludeNewer: Boolean!
}

type RootMutation {
  createInvite(invite:InviteInput!): Invite
  createCampaign(campaign:CampaignInput!): Campaign
  createTemplateCampaign(organizationId: String!): Campaign!
  deleteTemplateCampaign(organizationId: String!, campaignId: String!): Boolean!
  cloneTemplateCampaign(organizationId: String!, campaignId: String!): Campaign!
  editCampaign(id:String!, campaign:CampaignInput!): Campaign
  saveCampaignGroups(organizationId: String!, campaignGroups: [CampaignGroupInput!]!): [CampaignGroup!]!
  deleteCampaignGroup(organizationId: String!, campaignGroupId: String!): Boolean!
  filterLandlines(id:String!): Campaign
  bulkUpdateScript(findAndReplace: BulkUpdateScriptInput!): [ScriptUpdateResult]
  deleteJob(campaignId:String!, id:String!): JobRequest
  copyCampaign(id: String!): Campaign
  copyCampaigns(sourceCampaignId: String!, quantity: Int!, targetOrgId: String): [Campaign!]!
  exportCampaign(options: CampaignExportInput!): JobRequest
  createCannedResponse(cannedResponse:CannedResponseInput!): CannedResponse
  createOrganization(name: String!, userId: String!, inviteId: String!): Organization
  editOrganization(id: String! input: EditOrganizationInput!): Organization!
  joinOrganization(organizationUuid: String!): Organization!
  editOrganizationMembership(id: String!, level: RequestAutoApprove, role: String): OrganizationMembership!
  editOrganizationSettings(id: String!, input: OrganizationSettingsInput!): OrganizationSettings!
  purgeOrganizationUsers(organizationId: String!): Int!
  editUser(organizationId: String!, userId: String!, userData:UserInput): User
  resetUserPassword(organizationId: String!, userId: String!): String!
  changeUserPassword(userId: String!, formData: UserPasswordChange): User
  setUserSuspended(userId: String!, isSuspended: Boolean!): User!
  clearUserSessions(userId: String!): User!
  updateDefaultTextingTimezone(organizationId: String!, defaultTextingTz: String!): Organization!
  updateTextingHours( organizationId: String!, textingHoursStart: Int!, textingHoursEnd: Int!): Organization
  updateTextingHoursEnforcement( organizationId: String!, textingHoursEnforced: Boolean!): Organization
  updateTextRequestFormSettings(organizationId: String!, textRequestFormEnabled: Boolean!, textRequestType: String!, textRequestMaxCount: Int!): Organization
  bulkSendMessages(assignmentId: String!): [CampaignContact]
  sendMessage(message:MessageInput!, campaignContactId:String!): CampaignContact,
  tagConversation(campaignContactId: String!, tag: ContactTagActionInput!): CampaignContact
  createOptOut(optOut:ContactActionInput!, campaignContactId:String!):CampaignContact,
  removeOptOut(cell:Phone!):[CampaignContact],
  editCampaignContactMessageStatus(messageStatus: String!, campaignContactId:String!): CampaignContact,
  deleteQuestionResponses(interactionStepIds:[String], campaignContactId:String!): CampaignContact,
  updateQuestionResponses(questionResponses:[QuestionResponseInput], campaignContactId:String!): CampaignContact,
  handleConversation(
    campaignContactId: String!,
    message:MessageInput,
    questionResponses: [QuestionResponseInput],
    interactionStepIdsForDeletedQuestionResponses: [String],
    optOut: ContactActionInput,
    closeConversation: Boolean
  ): CampaignContact,
  setCampaignApproved(id: String!, approved: Boolean!): Campaign!,
  startCampaign(id:String!): Campaign,
  archiveCampaign(id:String!): Campaign,
  unarchiveCampaign(id:String!): Campaign,
  sendReply(id: String!, message: String!): CampaignContact
  getAssignmentContacts(assignmentId: String!, contactIds: [String], findNew: Boolean): [CampaignContact],
  findNewCampaignContact(assignmentId: String!, numberContacts: Int!): FoundContact,
  assignUserToCampaign(organizationUuid: String!, campaignId: String!): Campaign
  userAgreeTerms(userId: String!): User
  megaReassignCampaignContacts(organizationId:String!, campaignIdsContactIds:[CampaignIdContactId]!, newTexterUserIds:[String]): Boolean!
  megaBulkReassignCampaignContacts(organizationId:String!, campaignsFilter:CampaignsFilter, assignmentsFilter:AssignmentsFilter, tagsFilter: TagsFilter, contactsFilter:ContactsFilter, contactNameFilter: ContactNameFilter, newTexterUserIds:[String]): Boolean!
  requestTexts(count: Int!, email: String!, organizationId: String!, preferredTeamId: String!): String!
  releaseMessages(campaignId: String!, target: ReleaseActionTarget!, ageInHours: Float): String!
  releaseAllUnhandledReplies(organizationId: String!, ageInHours: Float, releaseOnRestricted: Boolean, limitToCurrentlyTextableContacts: Boolean): ReleaseAllUnhandledRepliesResult!
  markForSecondPass(campaignId: String!, input: SecondPassInput!): String!
  startAutosending(campaignId: String!): Campaign!
  pauseAutosending(campaignId: String!): Campaign!
  updateCampaignAutosendingLimit(campaignId: String!, limit: Int): Campaign!
  unMarkForSecondPass(campaignId: String!): String!
  deleteNeedsMessage(campaignId: String!): String!
  insertLinkDomain(organizationId: String!, domain: String!, maxUsageCount: Int!): LinkDomain!
  updateLinkDomain(organizationId: String!, domainId: String!, payload: UpdateLinkDomain!): LinkDomain!
  deleteLinkDomain(organizationId: String!, domainId: String!): Boolean!
  deleteCampaignOverlap(organizationId: String!, campaignId: String!, overlappingCampaignId: String!): DeleteCampaignOverlapResult!
  deleteManyCampaignOverlap(organizationId: String!, campaignId: String!, overlappingCampaignIds: [String]!): Int!
  resolveAssignmentRequest(assignmentRequestId: String!, approved: Boolean!, autoApproveLevel: RequestAutoApprove): Int!
  saveTag(organizationId: String!, tag: TagInput!): Tag!
  deleteTag(organizationId: String!, tagId: String!): Boolean!
  saveTeams(organizationId: String!, teams: [TeamInput]!): [Team]!
  deleteTeam(organizationId: String!, teamId: String!): Boolean!
  addUsersToTeam(teamId: String!, userIds: [String]!): Boolean!
  removeUsersFromTeam(teamId: String!, userIds: [String]!): Boolean!
  releaseMyReplies(organizationId: String!): Boolean!
  dismissMatchingAlarms(token: String!, organizationId: String!): Boolean!
  dismissAlarms(messageIds: [String!]!, organizationId: String!): Boolean!
  addToken(organizationId: String!, input: TrollTriggerInput!): Boolean!
  removeToken(token: String!, organizationId: String!): Boolean!
  createExternalSystem(organizationId: String!, externalSystem: ExternalSystemInput!): ExternalSystem!
  editExternalSystem(id: String!, externalSystem: ExternalSystemInput!): ExternalSystem!
  refreshExternalSystem(externalSystemId: String!): Boolean!
  createQuestionResponseSyncConfig(input: QuestionResponseSyncConfigInput!): ExternalSyncQuestionResponseConfig!
  deleteQuestionResponseSyncConfig(input: QuestionResponseSyncConfigInput!): ExternalSyncQuestionResponseConfig!
  createQuestionResponseSyncTarget(input: QuestionResponseSyncTargetInput!): ExternalSyncConfigTarget!
  deleteQuestionResponseSyncTarget(targetId: String!): String!
  syncCampaignToSystem(input: SyncCampaignToSystemInput!): Boolean!
  editExternalOptOutSyncConfig(systemId: String!, targetId: String): ExternalSystem!
  unassignTextsFromUser(membershipId: String!): Boolean!
  editSuperAdminStatus(userEmail: String!, superAdminStatus: Boolean!): Boolean!
  editOrganizationActive(organizationId: String!, active: Boolean!, deactivateMode: DeactivateMode): Boolean!
  bulkOptOut(organizationId: String!, csvFile: Upload, numbersList: String): Int!
  bulkOptIn(organizationId: String!, csvFile: Upload, numbersList: String): Int!
  exportOptOuts(organizationId: String!, campaignIds: [String!]): Boolean!
}

schema {
  query: RootQuery
  mutation: RootMutation
}



type User {
  id: ID
  firstName: String
  lastName: String
  displayName: String!
  email: String
  cell: String
  memberships(organizationId: String, after: Cursor, first: Int): OrganizationMembershipPage
  organizations(active: Boolean, role: String): [Organization]
  todos(organizationId: String): [Assignment]
  roles(organizationId: String!): [UserRole!]!
  teams(organizationId: String!): [Team]!
  currentRequest(organizationId: String!): AssignmentRequest
  assignedCell: Phone
  assignment(campaignId: String): Assignment
  terms: Boolean
  isSuperadmin: Boolean!
  notificationFrequency: String!
  isSuspended: Boolean!
}

type UsersList {
  users: [User]
}

type PaginatedUsers {
  users: [User]
  pageInfo: PageInfo
}

union UsersReturn = PaginatedUsers | UsersList



enum TextRequestType {
  UNSENT
  UNREPLIED
}

enum DeactivateMode {
  NOSUSPEND
  SUSPENDALL
  DELETEALL
}

type AssignmentTarget {
  type: String!
  campaign: Campaign
  countLeft: Int
  teamTitle: String
  teamId: String
  enabled: Boolean
  maxRequestCount: Int
}

type Organization {
  id: ID
  uuid: String
  name: String
  campaigns(cursor:OffsetLimitCursor, campaignsFilter: CampaignsFilter): PaginatedCampaigns!
  campaignsRelay(after: Cursor, first: Int, filter: CampaignsFilter): CampaignPage!
  memberships(after: Cursor, first: Int, filter: MembershipFilter): OrganizationMembershipPage
  people(role: String, campaignId: String, offset: Int): [User]
  peopleCount: Int
  optOuts: [OptOut]
  threeClickEnabled: Boolean
  optOutMessage: String
  defaultTextingTz: String!
  textingHoursEnforced: Boolean
  textingHoursStart: Int
  textingHoursEnd: Int
  textRequestFormEnabled: Boolean
  textRequestType: TextRequestType
  textRequestMaxCount: Int
  textsAvailable: Boolean
  pendingAssignmentRequestCount: Int!
  currentAssignmentTargets: [AssignmentTarget]!
  myCurrentAssignmentTarget: AssignmentTarget
  myCurrentAssignmentTargets: [AssignmentTarget]!
  escalatedConversationCount: Int!
  linkDomains: [LinkDomain]!
  unhealthyLinkDomains: [UnhealthyLinkDomain]!
  numbersApiKey: String
  settings: OrganizationSettings!
  tagList: [Tag!]!
  escalationTagList: [Tag!]!
  teams: [Team]!
  externalSystems(after: Cursor, first: Int): ExternalSystemPage!
  messagingServices(after: Cursor, first: Int, active: Boolean): MessagingServicePage
  campaignGroups(after: Cursor, first: Int): CampaignGroupPage!
  templateCampaigns(after: Cursor, first: Int): CampaignPage!
  deletedAt: String
  deletedBy: User
  autosendingMps: Int
}

input EditOrganizationInput {
  name: String
}



scalar Cursor

type RelayPageInfo {
  totalCount: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}


scalar Upload

scalar Date

scalar JSON

scalar Phone


input OrganizationSettingsInput {
  # Owner
  optOutMessage: String
  showContactLastName: Boolean
  showContactCell: Boolean
  confirmationClickForScriptLinks: Boolean
  defaulTexterApprovalStatus: RequestAutoApprove
  numbersApiKey: String
  trollbotWebhookUrl: String
  scriptPreviewForSupervolunteers: Boolean
  defaultCampaignBuilderMode: CampaignBuilderMode
  showDoNotAssignMessage: Boolean
  doNotAssignMessage: String
  defaultAutosendingControlsMode: AutosendingControlsMode

  # Superadmin
  startCampaignRequiresApproval: Boolean
}

type OrganizationSettings {
  id: ID!

  # Texter
  optOutMessage: String!
  showContactLastName: Boolean!
  showContactCell: Boolean!
  confirmationClickForScriptLinks: Boolean!
  showDoNotAssignMessage: Boolean!
  doNotAssignMessage: String!

  # Supervolunteer
  startCampaignRequiresApproval: Boolean
  scriptPreviewForSupervolunteers: Boolean
  defaultCampaignBuilderMode: CampaignBuilderMode

  # Admin
  defaultAutosendingControlsMode: AutosendingControlsMode

  # Owner
  defaulTexterApprovalStatus: RequestAutoApprove
  numbersApiKey: String
  trollbotWebhookUrl: String
}



enum UserRole {
  SUSPENDED
  TEXTER
  SUPERVOLUNTEER
  ADMIN
  OWNER
  SUPERADMIN
}

enum RequestAutoApprove {
  DO_NOT_APPROVE
  APPROVAL_REQUIRED
  AUTO_APPROVE
}

input MembershipFilter {
  nameSearch: String
  campaignId: String
  campaignArchived: Boolean
  roles: [String!]
}

type OrganizationMembership {
  id: ID!
  user: User!
  organization: Organization!
  role: UserRole!
  requestAutoApprove: RequestAutoApprove!
}

type OrganizationMembershipEdge {
  cursor: Cursor!
  node: OrganizationMembership!
}

type OrganizationMembershipPage {
  edges: [OrganizationMembershipEdge!]!
  pageInfo: RelayPageInfo!
}



input CampaignsFilter {
  isArchived: Boolean
  isStarted: Boolean
  organizationId: Int
  campaignId: Int
  listSize: Int
  pageSize: Int
  campaignTitle: String
}

type CampaignStats {
  sentMessagesCount: Int!
  receivedMessagesCount: Int!
  optOutsCount: Int!
  needsMessageOptOutsCount: Int!
  percentUnhandledReplies: Float!
  countMessagedContacts: Int!
  countNeedsMessageContacts: Int!
}

type DeliverabilityErrorStat {
  errorCode: String
  count: Int!
}

input CampaignDeliverabilityStatsFilter {
  initialMessagesOnly: Boolean
}

type CampaignDeliverabilityStats {
  deliveredCount: Int!
  sendingCount: Int!
  sentCount: Int!
  errorCount: Int!
  specificErrors: [DeliverabilityErrorStat]
}

type JobRequest {
  id: String!
  jobType: String!
  assigned: Boolean
  status: Int
  resultMessage: String
  createdAt: Date!
  updatedAt: Date!
}

type CampaignReadiness {
  id: ID!
  basics: Boolean!
  messagingService: Boolean!
  textingHours: Boolean!
  integration: Boolean!
  contacts: Boolean!
  autoassign: Boolean!
  cannedResponses: Boolean!
  campaignGroups: Boolean!
  campaignVariables: Boolean!
  interactions: Boolean!
  texters: Boolean!
}

enum ExternalSyncReadinessState {
  READY
  MISSING_SYSTEM
  MISSING_REQUIRED_MAPPING
  INCLUDES_NOT_ACTIVE_TARGETS
}

type CsvColumnMapping {
  column: String!
  remap: String!
}

type Campaign {
  id: ID!
  organization: Organization!
  title: String!
  description: String!
  dueBy: Date
  readiness: CampaignReadiness!
  isApproved: Boolean!
  isStarted: Boolean
  isArchived: Boolean
  isTemplate: Boolean!
  creator: User
  texters: [User]
  assignments(assignmentsFilter: AssignmentsFilter): [Assignment]
  interactionSteps: [InteractionStep]
  invalidScriptFields: [String!]!
  contacts: [CampaignContact]
  contactsCount: Int
  hasUnassignedContacts: Boolean
  hasUnsentInitialMessages: Boolean
  hasUnhandledMessages: Boolean
  customFields: [String]
  cannedResponses(userId: String): [CannedResponse!]!
  stats: CampaignStats,
  pendingJobs(jobTypes: [String]): [JobRequest]!
  datawarehouseAvailable: Boolean
  useDynamicAssignment: Boolean
  introHtml: String
  primaryColor: String
  logoImageUrl: String
  editors: String
  teams: [Team!]!
  campaignGroups: CampaignGroupPage
  campaignVariables: CampaignVariablePage!
  textingHoursStart: Int
  textingHoursEnd: Int
  isAutoassignEnabled: Boolean!
  repliesStaleAfter: Int
  isAssignmentLimitedToTeams: Boolean!
  timezone: String
  createdAt: String!
  previewUrl: String
  landlinesFiltered: Boolean!
  externalSystem: ExternalSystem
  syncReadiness: ExternalSyncReadinessState!
  externalSyncConfigurations(after: Cursor, first: Int): ExternalSyncQuestionResponseConfigPage!
  deliverabilityStats(filter: CampaignDeliverabilityStatsFilter): CampaignDeliverabilityStats!
  autosendStatus: String!
  messagingServiceSid: String
  autosendLimit: Int
  columnMapping: [CsvColumnMapping!]
  messagingService: MessagingService
}

type CampaignEdge {
  cursor: Cursor!
  node: Campaign!
}

type CampaignPage {
  edges: [CampaignEdge!]!
  pageInfo: RelayPageInfo!
}

type CampaignsList {
  campaigns: [Campaign]
}

union CampaignsReturn = PaginatedCampaigns | CampaignsList

type PaginatedCampaigns {
  campaigns: [Campaign!]!
  pageInfo: PageInfo!
}

type CampaignNavigation {
  nextCampaignId: String
  prevCampaignId: String
}

input TexterAssignmentInput {
  userId: String!
  contactsCount: Int!
}

input TexterInput {
  assignmentInputs: [TexterAssignmentInput!]!
  ignoreAfterDate: Date!
}

input CsvColumnMappingInput {
  column: String!
  remap: String!
}

input CampaignInput {
  title: String
  description: String
  dueBy: Date
  logoImageUrl: String
  primaryColor: String
  introHtml: String
  externalSystemId: String
  useDynamicAssignment: Boolean
  contacts: [CampaignContactInput]
  contactsFile: Upload
  externalListId: String
  filterOutLandlines: Boolean
  excludeCampaignIds: [String!]
  contactSql: String
  organizationId: String
  isAssignmentLimitedToTeams: Boolean
  teamIds: [ID]
  campaignGroupIds: [String!]
  campaignVariables: [CampaignVariableInput!]
  texters: TexterInput
  interactionSteps: InteractionStepInput
  cannedResponses: [CannedResponseInput]
  textingHoursStart: Int
  textingHoursEnd: Int
  isAutoassignEnabled: Boolean
  timezone: String
  repliesStaleAfter: Int
  messagingServiceSid: String
  autosendLimit: Int
  columnMapping: [CsvColumnMappingInput!]
}



input AssignmentsFilter {
  texterId: Int
  includeEscalated: Boolean
}

type Assignment {
  id: ID!
  texter: User!
  campaign: Campaign!
  contacts(contactsFilter: ContactsFilter): [CampaignContact!]!
  contactsCount(contactsFilter: ContactsFilter): Int!
  userCannedResponses: [CannedResponse!]!
  campaignCannedResponses: [CannedResponse!]!
  maxContacts: Int
}



type InteractionStep {
  id: ID!
  question: Question
  questionText: String
  scriptOptions: [String]!
  answerOption: String
  parentInteractionId: String
  isDeleted: Boolean
  answerActions: String
  questionResponse(campaignContactId: String): QuestionResponse
  createdAt: Date!
}

input InteractionStepInput {
  id: String
  questionText: String
  scriptOptions: [String]!
  answerOption: String
  answerActions: String
  parentInteractionId: String
  isDeleted: Boolean
  createdAt: Date
  interactionSteps: [InteractionStepInput]
}



type OptOut {
  id: ID
  cell: String
  assignment: Assignment
  createdAt: Date
}



type Message {
  id: ID
  text: String
  userNumber: String
  contactNumber: String
  createdAt: Date
  isFromContact: Boolean
  assignment: Assignment
  campaignId: String
  userId: ID
  sendStatus: String
  errorCodes: [String!]
}



enum MessagingServiceType {
  TWILIO
  ASSEMBLE_NUMBERS
}

type MessagingService {
  id: ID!
  messagingServiceSid: String!
  serviceType: MessagingServiceType!
  updatedAt: String!
  tcrBrandRegistrationLink: String
  name: String
  active: Boolean!
  isDefault: Boolean
}

type MessagingServiceEdge {
  cursor: Cursor!
  node: MessagingService!
}

type MessagingServicePage {
  edges: [MessagingServiceEdge!]!
  pageInfo: RelayPageInfo!
}



interface Register10DlcNotice {
  id: ID!
  tcrRegistrationUrl: String
}

type Register10DlcBrandNotice implements Register10DlcNotice {
  id: ID!
  tcrRegistrationUrl: String
}

type Register10DlcCampaignNotice implements Register10DlcNotice {
  id: ID!
  tcrRegistrationUrl: String
}

type Pending10DlcCampaignNotice {
  id: ID!
}

interface PricingNotice {
  id: ID!
}

type Pricing10DlcNotice implements PricingNotice {
  id: ID!
}

type PricingTollFreeNotice implements PricingNotice {
  id: ID!
}

union Notice = Register10DlcBrandNotice | Register10DlcCampaignNotice | Pending10DlcCampaignNotice | Pricing10DlcNotice | PricingTollFreeNotice

type NoticeEdge {
  cursor: Cursor!
  node: Notice!
}

type NoticePage {
  edges: [NoticeEdge!]!
  pageInfo: RelayPageInfo!
}



input ContactsFilter {
  messageStatus: String
  isOptedOut: Boolean
  validTimezone: Boolean
  includePastDue: Boolean
}

type Location {
  city: String
  state: String
}

input ContactNameFilter {
  firstName: String
  lastName: String
  cellNumber: String
}

type CampaignContact {
  id: ID!
  firstName: String!
  lastName: String!
  cell: Phone!
  zip: String
  external_id: String
  customFields: JSON
  messages: [Message!]!
  timezone: String
  location: Location
  optOut: OptOut
  campaign: Campaign!
  questionResponseValues: [AnswerOption!]!
  questionResponses: [AnswerOption!]!
  interactionSteps: [InteractionStep!]!
  messageStatus: String!
  assignmentId: String
  updatedAt: Date!
  tags: [CampaignContactTag!]!
}

input CampaignContactInput {
  firstName: String!
  lastName: String!
  cell: String!
  zip: String
  external_id: String
  customFields: String
}



type CampaignContactTag {
  id: String!
  tag: Tag!
  tagger: User!
  createdAt: String!
  updatedAt: String!
}



input CampaignGroupInput {
  id: String
  name: String!
  description: String!
}

type CampaignGroup {
  id: ID!
  organizationId: String!
  name: String!
  description: String!
  campaigns: CampaignPage!
  createdAt: String!
  updatedAt: String!
}

type CampaignGroupEdge {
  cursor: Cursor!
  node: CampaignGroup!
}

type CampaignGroupPage {
  edges: [CampaignGroupEdge!]!
  pageInfo: RelayPageInfo!
}



input CampaignVariableInput {
  displayOrder: Int!
  name: String!
  value: String
}

type CampaignVariable {
  id: ID!
  displayOrder: Int!
  name: String!
  value: String
  createdAt: String!
  updatedAt: String!
}

type CampaignVariableEdge {
  cursor: Cursor!
  node: CampaignVariable!
}

type CampaignVariablePage {
  edges: [CampaignVariableEdge!]!
  pageInfo: RelayPageInfo!
}



input CannedResponseInput {
  id: String
  title: String
  text: String
  campaignId: String
  userId: String
  displayOrder: Int
}

type CannedResponse {
  id: ID!
  title: String!
  text: String!
  isUserCreated: Boolean
  displayOrder: Int!
}



type QuestionResponse {
  id: String
  value: String
  question: Question
}



type Question {
  text: String
  answerOptions: [AnswerOption]
  interactionStep: InteractionStep
}

type AnswerOption {
  interactionStepId: Int
  value: String
  action: String
  nextInteractionStep: InteractionStep
  responders: [CampaignContact]
  responderCount: Int
  question: Question
}



type Invite {
  id: ID
  isValid: Boolean
  hash: String
}



type LinkDomain {
  id: ID!
  domain: String!
  maxUsageCount: Int!
  currentUsageCount: Int!
  isManuallyDisabled: Boolean!
  isHealthy: Boolean!
  cycledOutAt: Date!
  createdAt: Date!
}

type UnhealthyLinkDomain {
  id: ID!
  domain: String!
  createdAt: Date!
  healthyAgainAt: Date
}



type AssignmentRequest {
  id: ID!
  amount: Int!
  organization: Organization!
  createdAt: Date!
  updatedAt: Date!
  user: User!
  status: String!
}



input ConversationFilter {
  assignmentsFilter: AssignmentsFilter
  campaignsFilter: CampaignsFilter
  contactsFilter: ContactsFilter
}

type Conversation {
  texter: User!
  contact: CampaignContact!
  campaign: Campaign!
}

type PaginatedConversations {
  conversations: [Conversation]!
  pageInfo: PageInfo
}



type Tag {
  id: ID!
  title: String!
  description: String!
  textColor: String!
  backgroundColor: String!
  author: User
  confirmationSteps: [[String]]!
  onApplyScript: String!
  webhookUrl: String!
  isAssignable: Boolean!
  isSystem: Boolean!
  createdAt: Date!

  contacts(campaignId: String): [CampaignContact]!
  externalSyncConfigurations(after: Cursor, first: Int): ExternalSyncTagConfigPage!
}

input TagInput {
  id: ID
  title: String!
  description: String!
  textColor: String
  backgroundColor: String
  confirmationSteps: [[String]]
  onApplyScript: String
  webhookUrl: String
  isAssignable: Boolean!
}

input TagsFilter {
  excludeEscalated: Boolean
  escalatedConvosOnly: Boolean
  specificTagIds: [String]
}



type Team {
  id: ID!
  title: String!
  description: String!
  textColor: String!
  backgroundColor: String!
  author: User
  isAssignmentEnabled: Boolean!
  assignmentPriority: Int
  assignmentType: TextRequestType
  maxRequestCount: Int
  createdAt: Date!

  users: [User]!
  campaigns: [Campaign]!
  escalationTags: [Tag]
}

input TeamInput {
  id: ID
  title: String
  description: String
  textColor: String
  backgroundColor: String
  isAssignmentEnabled: Boolean
  assignmentPriority: Int
  assignmentType: TextRequestType
  maxRequestCount: Int
  escalationTagIds: [String!]
}



type TrollAlarm {
  id: ID!
  messageId: ID!
  messageText: String!
  token: String!
  dismissed: Boolean!
  user: User!
  contact: CampaignContact!
}

type TrollAlarmPage {
  totalCount: Int!
  alarms: [TrollAlarm!]!
}

enum TrollTriggerMode {
  SIMPLE
  ENGLISH
  SPANISH
}

input TrollTriggerInput {
  token: String!
  mode: TrollTriggerMode!
}

type TrollTrigger {
  id: ID!
  token: String!
  mode: TrollTriggerMode!
  compiledTsQuery: String!
  organizationId: String!
}

type TrollAlarmCount {
  totalCount: Int!
}



enum ExternalSystemType {
  VAN
}

enum VanOperationMode {
  VOTERFILE
  MYCAMPAIGN
}

enum ExternalDataCollectionStatus {
  ACTIVE
  ARCHIVED
  INACTIVE
}

input ExternalSystemInput {
  name: String!
  type: ExternalSystemType!
  username: String!
  apiKey: String!
  operationMode: VanOperationMode!
}

input ExternalSurveyQuestionFilter {
  status: ExternalDataCollectionStatus
}

input ExternalActivistCodeFilter {
  status: ExternalDataCollectionStatus
}

type ExternalSystem {
  id: String!
  name: String!
  type: ExternalSystemType!
  username: String!
  apiKey: String!
  organizationId: String!
  createdAt: Date!
  updatedAt: Date!
  syncedAt: Date
  operationMode: VanOperationMode!
  lists(after: Cursor, first: Int): ExternalListPage!
  surveyQuestions(filter: ExternalSurveyQuestionFilter, after: Cursor, first: Int): ExternalSurveyQuestionPage!
  activistCodes(filter: ExternalActivistCodeFilter, after: Cursor, first: Int): ExternalActivistCodePage!
  resultCodes(after: Cursor, first: Int): ExternalResultCodePage!
  optOutSyncConfig: ExternalResultCodeTarget
}

type ExternalSystemEdge {
  cursor: Cursor!
  node: ExternalSystem!
}

type ExternalSystemPage {
  edges: [ExternalSystemEdge!]!
  pageInfo: RelayPageInfo!
}



type ExternalList {
  systemId: String!
  externalId: String!
  name: String!
  description: String!
  listCount: Int!
  doorCount: Int!
  createdAt: Date!
  updatedAt: Date!
}

type ExternalListEdge {
  cursor: Cursor!
  node: ExternalList!
}

type ExternalListPage {
  edges: [ExternalListEdge!]!
  pageInfo: RelayPageInfo!
}



type ExternalSurveyQuestion {
  id: String!
  systemId: String!
  externalId: String!
  type: String!
  cycle: Int!
  name: String!
  mediumName: String!
  shortName: String!
  scriptQuestion: String!
  status: ExternalDataCollectionStatus!
  createdAt: Date!
  updatedAt: Date!
  responseOptions(after: Cursor, first: Int): ExternalSurveyQuestionResponseOptionPage!
}

type ExternalSurveyQuestionEdge {
  cursor: Cursor!
  node: ExternalSurveyQuestion!
}

type ExternalSurveyQuestionPage {
  edges: [ExternalSurveyQuestionEdge!]!
  pageInfo: RelayPageInfo!
}



type ExternalSurveyQuestionResponseOption {
  id: String!
  externalSurveyQuestionId: String!
  externalId: String!
  name: String!
  mediumName: String!
  shortName: String!
  createdAt: Date!
  updatedAt: Date!
}

type ExternalSurveyQuestionResponseOptionEdge {
  cursor: Cursor!
  node: ExternalSurveyQuestionResponseOption!
}

type ExternalSurveyQuestionResponseOptionPage {
  edges: [ExternalSurveyQuestionResponseOptionEdge!]!
  pageInfo: RelayPageInfo!
}



type ExternalActivistCode {
  id: String!
  systemId: String!
  externalId: String!
  type: String!
  name: String!
  mediumName: String!
  shortName: String!
  description: String
  scriptQuestion: String
  status: ExternalDataCollectionStatus!
  createdAt: Date!
  updatedAt: Date!
}

type ExternalActivistCodeEdge {
  cursor: Cursor!
  node: ExternalActivistCode!
}

type ExternalActivistCodePage {
  edges: [ExternalActivistCodeEdge!]!
  pageInfo: RelayPageInfo!
}



type ExternalResultCode {
  id: String!
  systemId: String!
  externalId: String!
  name: String!
  mediumName: String!
  shortName: String!
  createdAt: Date!
  updatedAt: Date!
}

type ExternalResultCodeEdge {
  cursor: Cursor!
  node: ExternalResultCode!
}

type ExternalResultCodePage {
  edges: [ExternalResultCodeEdge!]!
  pageInfo: RelayPageInfo!
}



type ExternalResultCodeTarget {
  id: String!
  resultCode: ExternalResultCode!
}

type ExternalActivistCodeTarget {
  id: String!
  activistCode: ExternalActivistCode!
}

type ExternalSurveyQuestionResponseOptionTarget {
  id: String!
  responseOption: ExternalSurveyQuestionResponseOption!
}

union ExternalSyncConfigTarget = ExternalResultCodeTarget | ExternalActivistCodeTarget | ExternalSurveyQuestionResponseOptionTarget

type ExternalSyncConfigTargetEdge {
  cursor: Cursor!
  node: ExternalSyncConfigTarget!
}

type ExternalSyncConfigTargetPage {
  edges: [ExternalSyncConfigTargetEdge!]!
  pageInfo: RelayPageInfo!
}

type ExternalSyncQuestionResponseConfig {
  id: String!
  campaignId: String!
  interactionStepId: String!
  questionResponseValue: String!
  includesNotActive: Boolean!
  isMissing: Boolean!
  isRequired: Boolean!
  createdAt: Date
  updatedAt: Date
  interactionStep: InteractionStep!
  targets(after: Cursor, first: Int): [ExternalSyncConfigTarget]
}

type ExternalSyncQuestionResponseConfigEdge {
  cursor: Cursor!
  node: ExternalSyncQuestionResponseConfig!
}

type ExternalSyncQuestionResponseConfigPage {
  edges: [ExternalSyncQuestionResponseConfigEdge!]!
  pageInfo: RelayPageInfo!
}

type ExternalSyncTagConfig {
  id: String!
  systemId: String!
  tagId: String!
  includesNotActive: Boolean!
  isMissing: Boolean!
  isRequired: Boolean!
  createdAt: Date
  updatedAt: Date
  tag: Tag!
  targets(after: Cursor, first: Int): ExternalSyncConfigTargetPage
}

type ExternalSyncTagConfigEdge {
  cursor: Cursor!
  node: ExternalSyncTagConfig!
}

type ExternalSyncTagConfigPage {
  edges: [ExternalSyncTagConfigEdge!]!
  pageInfo: RelayPageInfo!
}
